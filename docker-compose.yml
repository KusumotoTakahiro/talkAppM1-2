version: "3.9"

services:
  backend:
    tty: true
    container_name: back-container
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - .:/code
      - ./backend:/code/backend
    ports:
      - "8080:8080" # ローカルのポート:コンテナのポート
    command: >
      sh -c '
        python backend/manage.py makemigrations --noinput &&
        python backend/manage.py migrate --noinput &&
        python backend/manage.py collectstatic --noinput &&
        cd backend &&
        gunicorn -w 4 -b 0.0.0.0:8080 backend.wsgi:application
      '
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - backend_network

  frontend:
    tty: true
    container_name: front-container
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: always
    volumes:
      - ./frontend:/code/frontend
      - talkAppM1_node_modules:/code/frontend/node_modules
    # command: > 
    #   sh -c '
    #     cd frontend && 
    #     npm install &&
    #     WATCHPACK_POLLING=true npm start
    #     # npm run build # 本番時のbuildコマンド
    #   '
    # ports:
    #   - "3000:3000"
  
  nginx:
    image: nginx
    container_name: nginx
    ports:
      - 3000:80
    volumes:
      - ./frontend/build:/var/www/html
      - ./nginx/:/etc/nginx/conf.d/
    depends_on:
      - frontend


  db:
    container_name: database-container
    build:
      context: ./database
      dockerfile: Dockerfile
    platform: linux/amd64
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      timeout: 10s
      retries: 10
    # ports:
    #   - "3306:3306"
    expose:
      - 3306
    volumes:
      - ./database/db:/var/lib/mysql
    env_file:
      - .env
    networks:
      - backend_network

networks:
  backend_network:
    driver: bridge

volumes: 
  talkAppM1_node_modules:
